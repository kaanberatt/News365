// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News365.DataAccess.Concrete.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace News365.DataAccess.Migrations
{
    [DbContext(typeof(News365DbContext))]
    [Migration("20230118161424_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("News365.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("News365.Entities.Concrete.Document", b =>
                {
                    b.Property<string>("DocumentUnique")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentFolderName")
                        .HasColumnType("text");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text");

                    b.Property<string>("DocumentSize")
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .HasColumnType("text");

                    b.Property<string>("Image_Url")
                        .HasColumnType("text");

                    b.Property<string>("Storage_Url")
                        .HasColumnType("text");

                    b.Property<string>("Video_Url")
                        .HasColumnType("text");

                    b.HasKey("DocumentUnique");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("News365.Entities.Concrete.NewsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileCode")
                        .HasColumnType("text");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("categories")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("categories");

                    b.ToTable("News");
                });

            modelBuilder.Entity("News365.Entities.Concrete.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileCodeCenter")
                        .HasColumnType("text");

                    b.Property<string>("FileCodeCenterLeft")
                        .HasColumnType("text");

                    b.Property<string>("FileCodeCenterRight")
                        .HasColumnType("text");

                    b.Property<int>("PageId")
                        .HasColumnType("integer");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("News365.Entities.Concrete.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileCode")
                        .HasColumnType("text");

                    b.Property<int>("SliderId")
                        .HasColumnType("integer");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("News365.Entities.Concrete.User", b =>
                {
                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("FullName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            FullName = "Admin",
                            Email = "admin@admin.com",
                            Password = "Admin123",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("News365.Entities.Concrete.NewsModel", b =>
                {
                    b.HasOne("News365.Entities.Concrete.Category", "Category")
                        .WithMany("NewsModels")
                        .HasForeignKey("categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("News365.Entities.Concrete.Category", b =>
                {
                    b.Navigation("NewsModels");
                });
#pragma warning restore 612, 618
        }
    }
}
